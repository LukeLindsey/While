// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | IDENT of (string)
  | INT of (int)
  | DO
  | WHILE
  | ELSE
  | THEN
  | IF
  | SEMICOLON
  | SKIP
  | COLONEQUALS
  | AND
  | NOT
  | LESSTHANEQUALS
  | EQUALS
  | FALSE
  | TRUE
  | RPAREN
  | LPAREN
  | TIMES
  | MINUS
  | PLUS
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IDENT
    | TOKEN_INT
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_SEMICOLON
    | TOKEN_SKIP
    | TOKEN_COLONEQUALS
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_LESSTHANEQUALS
    | TOKEN_EQUALS
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_TIMES
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startParseStm
    | NONTERM_ParseStm
    | NONTERM_seq
    | NONTERM_stm
    | NONTERM_aexp
    | NONTERM_term
    | NONTERM_factor
    | NONTERM_bexp
    | NONTERM_bterm
    | NONTERM_bprimary
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val ParseStm : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Stm) 
